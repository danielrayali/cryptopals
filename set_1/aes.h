#pragma once

#include <cstdint>
#include <vector>
#include <cmath>
#include <utility>

#include "xor.h"
#include "util.h"

class Aes128EcbCms {
public:
    Aes128EcbCms() = default;

    ~Aes128EcbCms() = default;

    void SetKey(const std::vector<uint8_t>& key) {
        this->GenerateRoundKeys(key);
    }

    std::vector<uint8_t> Encrypt(const std::vector<uint8_t>& plain_text) {
        std::vector<uint8_t> cipher_text;
        for (size_t i = 0; i < plain_text.size(); i += kKeySize) {
            std::vector<uint8_t> block_cipher_text = this->EncryptRound(Slice(plain_text, i, kKeySize));
            std::cout << "Block text: ";
            for (auto datum : block_cipher_text) {
                std::cout << std::setfill('0') << std::setw(2) << std::hex << (int)datum;
            }
            std::cout << std::endl;
            cipher_text.insert(cipher_text.end(), block_cipher_text.begin(), block_cipher_text.end());
        }

        size_t remainder = (plain_text.size() % (kKeySize));
        std::vector<uint8_t> last_block = Slice(plain_text, (plain_text.size() - remainder), remainder);
        while (last_block.size() < kKeySize) {
            last_block.emplace_back(kKeySize - remainder);
        }
        std::vector<uint8_t> last_block_cipher_text = this->EncryptRound(last_block);
        cipher_text.insert(cipher_text.end(), last_block_cipher_text.begin(), last_block_cipher_text.end());

        std::cout << "Cipher text: ";
        for (auto datum : cipher_text) {
            std::cout << std::setfill('0') << std::setw(2) << std::hex << (int)datum;
        }
        std::cout << std::endl;

        return cipher_text;
    }

    std::vector<uint8_t> Decrypt(const std::vector<uint8_t>& cipher_text) {
        if ((cipher_text.size() % kKeySize) != 0) {
            throw std::runtime_error("Cannot decrypt a cipher text with byte size " + std::to_string(cipher_text.size()));
        }

        std::vector<uint8_t> plain_text;
        for (size_t i = 0; i < cipher_text.size(); i += kKeySize) {
            std::vector<uint8_t> cipher_text_block = Slice(cipher_text, i, kKeySize);
            std::vector<uint8_t> plain_text_block = this->DecryptRound(cipher_text_block);

            std::cout << "Block text: ";
            PrintAscii(plain_text_block, 0);
            std::cout << std::endl;

            plain_text.insert(plain_text.end(), plain_text_block.begin(), plain_text_block.end());
        }

        while (plain_text.back() == 0) {
            plain_text.pop_back();
        }

        return plain_text;
    }

private:
    const size_t kKeySize = (128/8);

    std::vector<uint8_t> key_;

    std::vector<std::vector<uint8_t>> round_keys_;

    std::vector<std::vector<uint8_t>> round_constants_ = {
        { 0x01, 0x00, 0x00, 0x00 },
        { 0x02, 0x00, 0x00, 0x00 },
        { 0x04, 0x00, 0x00, 0x00 },
        { 0x08, 0x00, 0x00, 0x00 },
        { 0x10, 0x00, 0x00, 0x00 },
        { 0x20, 0x00, 0x00, 0x00 },
        { 0x40, 0x00, 0x00, 0x00 },
        { 0x80, 0x00, 0x00, 0x00 },
        { 0x1B, 0x00, 0x00, 0x00 },
        { 0x36, 0x00, 0x00, 0x00 }
    };

    const uint8_t s_box_[256] = {
        0x63 ,0x7c ,0x77 ,0x7b ,0xf2 ,0x6b ,0x6f ,0xc5 ,0x30 ,0x01 ,0x67 ,0x2b ,0xfe ,0xd7 ,0xab ,0x76,
        0xca ,0x82 ,0xc9 ,0x7d ,0xfa ,0x59 ,0x47 ,0xf0 ,0xad ,0xd4 ,0xa2 ,0xaf ,0x9c ,0xa4 ,0x72 ,0xc0,
        0xb7 ,0xfd ,0x93 ,0x26 ,0x36 ,0x3f ,0xf7 ,0xcc ,0x34 ,0xa5 ,0xe5 ,0xf1 ,0x71 ,0xd8 ,0x31 ,0x15,
        0x04 ,0xc7 ,0x23 ,0xc3 ,0x18 ,0x96 ,0x05 ,0x9a ,0x07 ,0x12 ,0x80 ,0xe2 ,0xeb ,0x27 ,0xb2 ,0x75,
        0x09 ,0x83 ,0x2c ,0x1a ,0x1b ,0x6e ,0x5a ,0xa0 ,0x52 ,0x3b ,0xd6 ,0xb3 ,0x29 ,0xe3 ,0x2f ,0x84,
        0x53 ,0xd1 ,0x00 ,0xed ,0x20 ,0xfc ,0xb1 ,0x5b ,0x6a ,0xcb ,0xbe ,0x39 ,0x4a ,0x4c ,0x58 ,0xcf,
        0xd0 ,0xef ,0xaa ,0xfb ,0x43 ,0x4d ,0x33 ,0x85 ,0x45 ,0xf9 ,0x02 ,0x7f ,0x50 ,0x3c ,0x9f ,0xa8,
        0x51 ,0xa3 ,0x40 ,0x8f ,0x92 ,0x9d ,0x38 ,0xf5 ,0xbc ,0xb6 ,0xda ,0x21 ,0x10 ,0xff ,0xf3 ,0xd2,
        0xcd ,0x0c ,0x13 ,0xec ,0x5f ,0x97 ,0x44 ,0x17 ,0xc4 ,0xa7 ,0x7e ,0x3d ,0x64 ,0x5d ,0x19 ,0x73,
        0x60 ,0x81 ,0x4f ,0xdc ,0x22 ,0x2a ,0x90 ,0x88 ,0x46 ,0xee ,0xb8 ,0x14 ,0xde ,0x5e ,0x0b ,0xdb,
        0xe0 ,0x32 ,0x3a ,0x0a ,0x49 ,0x06 ,0x24 ,0x5c ,0xc2 ,0xd3 ,0xac ,0x62 ,0x91 ,0x95 ,0xe4 ,0x79,
        0xe7 ,0xc8 ,0x37 ,0x6d ,0x8d ,0xd5 ,0x4e ,0xa9 ,0x6c ,0x56 ,0xf4 ,0xea ,0x65 ,0x7a ,0xae ,0x08,
        0xba ,0x78 ,0x25 ,0x2e ,0x1c ,0xa6 ,0xb4 ,0xc6 ,0xe8 ,0xdd ,0x74 ,0x1f ,0x4b ,0xbd ,0x8b ,0x8a,
        0x70 ,0x3e ,0xb5 ,0x66 ,0x48 ,0x03 ,0xf6 ,0x0e ,0x61 ,0x35 ,0x57 ,0xb9 ,0x86 ,0xc1 ,0x1d ,0x9e,
        0xe1 ,0xf8 ,0x98 ,0x11 ,0x69 ,0xd9 ,0x8e ,0x94 ,0x9b ,0x1e ,0x87 ,0xe9 ,0xce ,0x55 ,0x28 ,0xdf,
        0x8c ,0xa1 ,0x89 ,0x0d ,0xbf ,0xe6 ,0x42 ,0x68 ,0x41 ,0x99 ,0x2d ,0x0f ,0xb0 ,0x54 ,0xbb ,0x16
    };

    const uint8_t inverse_s_box_[256] = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    };

    std::vector<uint8_t> DecryptRound(const std::vector<uint8_t>& cipher_text_block) {
        if (cipher_text_block.size() != kKeySize) {
            throw std::runtime_error("Cannot decyrpt a block that is not 128 bits wide");
        }

        std::vector<uint8_t> plain_text = XorEqual(cipher_text_block, round_keys_[10]);

        std::cout << "After round 10 remove round key: ";
        PrintHex(plain_text);
        std::cout << std::endl;

        this->InverseShiftRows(plain_text);

        std::cout << "After round 10 inverse row shifts: ";
        PrintHex(plain_text);
        std::cout << std::endl;

        for (size_t i = 0; i < plain_text.size(); ++i) {
            plain_text[i] = this->InverseSBox(plain_text[i]);
        }
        std::cout << "After round 10 inverse substitutes: ";
        PrintHex(plain_text);
        std::cout << std::endl;

        for (size_t i = 9; i >= 1; --i) {
            plain_text = XorEqual(plain_text, round_keys_[i]);

            std::cout << "After round " << i << " remove round key: ";
            PrintHex(plain_text);
            std::cout << std::endl;

            this->InverseMixColumn(plain_text);

            std::cout << "After round " << i << " inverse mix column: ";
            PrintHex(plain_text);
            std::cout << std::endl;

            this->InverseShiftRows(plain_text);

            std::cout << "After round " << i << " inverse shift rows: ";
            PrintHex(plain_text);
            std::cout << std::endl;

            for (size_t j = 0; j < plain_text.size(); ++j) {
                plain_text[j] = this->InverseSBox(plain_text[j]);
            }

            std::cout << "After round " << i << " inverse substitution: ";
            PrintHex(plain_text);
            std::cout << std::endl;
        }

        plain_text = XorEqual(plain_text, round_keys_[0]);

        std::cout << "After round 0 remove round key: ";
        PrintHex(plain_text);
        std::cout << std::endl;

        return plain_text;
    }

    std::vector<uint8_t> EncryptRound(const std::vector<uint8_t>& block) {
        if (block.size() != kKeySize) {
            throw std::runtime_error("Cannot encrypt block that is not 128 bits wide");
        }

        std::vector<uint8_t> cipher_text, round_text;
        round_text = XorEqual(block, round_keys_[0]);

        std::cout << "After round 0 add roundkey: ";
        PrintHex(round_text);
        std::cout << std::endl;

        for (size_t i = 1; i < 10; ++i) {
            for (size_t i = 0; i < round_text.size(); ++i) {
                round_text[i] = this->SBox(round_text[i]);
            }

            std::cout << "After round " << i << " substitutes: ";
            PrintHex(round_text);
            std::cout << std::endl;

            this->ShiftRows(round_text);
            std::cout << "After round " << i << " row shifts: ";
            PrintHex(round_text);
            std::cout << std::endl;

            this->MixColumn(round_text);
            std::cout << "After round " << i << " mix column: ";
            PrintHex(round_text);
            std::cout << std::endl;

            round_text = XorEqual(round_text, round_keys_[i]);

            std::cout << "After round " << i << " add roundkey: ";
            PrintHex(round_text);
            std::cout << std::endl;
        }

        for (size_t i = 0; i < round_text.size(); ++i) {
            round_text[i] = this->SBox(round_text[i]);
        }
        std::cout << "After round 10 substitutes: ";
        PrintHex(round_text);
        std::cout << std::endl;

        this->ShiftRows(round_text);
        std::cout << "After round 10 row shifts: ";
        PrintHex(round_text);
        std::cout << std::endl;

        round_text = XorEqual(round_text, round_keys_[10]);
        std::cout << "After round 10 add roundkey: ";
        PrintHex(round_text);
        std::cout << std::endl;

        cipher_text = round_text;

        return cipher_text;
    }

    inline uint8_t MixColumnMultiply(uint8_t times, uint8_t data) {
        if (times == 3) {
            return (((data * 2) ^ (data & 0x80 ? 0x1B : 0)) ^ data);
        } else if (times == 2) {
            return ((data * 2) ^ (data & 0x80 ? 0x1B : 0));
        } else {
            return data;
        }
    }

    inline uint8_t InverseMixColumnMultiply(uint8_t constant, uint8_t data) {
        static uint8_t by_nine[256] = {
            0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
            0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
            0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
            0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
            0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
            0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
            0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
            0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
            0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
            0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
            0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
            0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
            0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
            0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
            0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
            0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
        };

        static uint8_t by_eleven[256] = {
            0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
            0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
            0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
            0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
            0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
            0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
            0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
            0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
            0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
            0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
            0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
            0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
            0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
            0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
            0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
            0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
        };

        static uint8_t by_thirteen[256] = {
            0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
            0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
            0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
            0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
            0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
            0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
            0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
            0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
            0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
            0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
            0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
            0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
            0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
            0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
            0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
            0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
        };

        static uint8_t by_fourteen[256] = {
            0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
            0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
            0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
            0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
            0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
            0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
            0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
            0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
            0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
            0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
            0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
            0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
            0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
            0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
            0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
            0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
        };

        switch (constant) {
        case 9: return by_nine[data]; break;
        case 11: return by_eleven[data]; break;
        case 13: return by_thirteen[data]; break;
        case 14: return by_fourteen[data]; break;
        }
        throw std::runtime_error("Unknown Galios constant " + std::to_string(constant));
    }

    void InverseMixColumn(std::vector<uint8_t>& data) {
        size_t size = sqrt(data.size());
        std::vector<std::vector<uint8_t>> square = MakeSquareMatrix(data, size);
        static std::vector<std::vector<uint8_t>> fixed = {
            { 0x0E, 0x09, 0x0D, 0x0B },
            { 0x0B, 0x0E, 0x09, 0x0D },
            { 0x0D, 0x0B, 0x0E, 0x09 },
            { 0x09, 0x0D, 0x0B, 0x0E }
        };

        // Destination loop
        std::vector<std::vector<uint8_t>> output = Zeros(size);
        for (size_t i = 0; i < size; ++i) {
            for (size_t j = 0; j < size; ++j) {
                output[i][j] = 0;
                for (size_t k = 0; k < size; ++k) {
                    output[i][j] ^= InverseMixColumnMultiply(fixed[k][j], square[i][k]);
                }
            }
        }

        data = Concat(output);
    }

    void MixColumn(std::vector<uint8_t>& data) {
        size_t size = sqrt(data.size());
        std::vector<std::vector<uint8_t>> square = MakeSquareMatrix(data, size);
        static std::vector<std::vector<uint8_t>> fixed = {
            { 0x02, 0x01, 0x01, 0x03 },
            { 0x03, 0x02, 0x01, 0x01 },
            { 0x01, 0x03, 0x02, 0x01 },
            { 0x01, 0x01, 0x03, 0x02 }
        };

        // Destination loop
        std::vector<std::vector<uint8_t>> output = Zeros(size);
        for (size_t i = 0; i < size; ++i) {
            for (size_t j = 0; j < size; ++j) {
                output[i][j] = 0;
                for (size_t k = 0; k < size; ++k) {
                    output[i][j] ^= MixColumnMultiply(fixed[k][j], square[i][k]);
                }
            }
        }

        data = Concat(output);
    }

    void ShiftRows(std::vector<uint8_t>& data) {
        std::vector<uint8_t> source(data);
        size_t square_size = sqrt(data.size());
        for (size_t i = 0; i < square_size; ++i) {
            for (size_t j = 1; j < square_size; ++j) {
                data[i * square_size + j] = source[(((i + j) % square_size) * square_size) + j];
            }
        }
    }

    void InverseShiftRows(std::vector<uint8_t>& data) {
        std::vector<uint8_t> source(data);
        size_t square_size = sqrt(data.size());
        for (size_t i = 0; i < square_size; ++i) {
            for (size_t j = 1; j < square_size; ++j) {
                data[(((i + j) % square_size) * square_size) + j] = source[i * square_size + j];
            }
        }
    }

    void GenerateRoundKeys(const std::vector<uint8_t>& key) {
        round_keys_ = std::vector<std::vector<uint8_t>>{ 1, key };
        std::cout << "Round key[0]: ";
        PrintHex(round_keys_[0]);
        std::cout << std::endl;

        for (size_t i = 0; i < 10; ++i) {
            round_keys_.emplace_back(this->GetRoundKey(round_keys_[i], i));
            std::cout << "Round key[" << i+1 << "]: ";
            PrintHex(round_keys_.back());
            std::cout << std::endl;
        }
    }

    inline uint8_t SBox(const uint8_t value) {
        return s_box_[value];
    }

    inline uint8_t InverseSBox(const uint8_t value) {
        return inverse_s_box_[value];
    }

    std::vector<uint8_t> GetRoundKey(const std::vector<uint8_t>& prev_key, const int round) {
        std::vector<std::vector<uint8_t>> w;
        for (size_t i = 0 ; i < 4; ++i) {
            w.push_back({});
            std::cout << "w[" << i << "]: ";
            for (size_t j = 0; j < 4; ++j) {
                w.back().push_back(prev_key[(i * 4) + j]);
                std::cout << std::hex << (int)w.back().back() << " ";
            }
            std::cout << std::endl;
        }

        w.emplace_back(XorEqual(w[0], g_func(w[3], round_constants_[round])));
        std::cout << "w[" << 4 << "]: ";
        PrintHex(w.back());
        std::cout << std::endl;

        for (size_t i = 1; i < 4; ++i) {
            std::cout << "w[" << i+4 << "]: ";
            w.emplace_back(XorEqual(w[i], w[i+3]));
            PrintHex(w.back());
            std::cout << std::endl;
        }

        return Concat( { w.begin() + 4, w.end() } );
    }

    std::vector<uint8_t> g_func(const std::vector<uint8_t>& input, const std::vector<uint8_t>& round_constant) {
        if (input.size() != 4) {
            throw std::runtime_error("Erroneous size passed to g()");
        }

        // Circular byte shift left
        std::vector<uint8_t> output{input};
        output.push_back(output[0]);
        output.erase(output.begin());

        std::cout << "Shifted:              ";
        PrintHex(output);
        std::cout << std::endl;

        // Byte substitution (S-Box)
        for (size_t i = 0; i < output.size(); ++i) {
            output[i] = this->SBox(output[i]);
        }

        std::cout << "S-Boxed:              ";
        PrintHex(output);
        std::cout << std::endl;

        std::cout << "Round constant:       ";
        PrintHex(round_constant);
        std::cout << std::endl;

        // Add round constant
        output = XorEqual(output, round_constant);

        std::cout << "After round constant: ";
        PrintHex(output);
        std::cout << std::endl;

        return output;
    }
};
